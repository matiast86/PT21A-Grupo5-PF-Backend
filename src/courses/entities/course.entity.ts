import { ApiProperty } from '@nestjs/swagger';
import { Category } from 'src/categories/entities/category.entity';
import { Language } from 'src/language/entities/language.entity';
import { Lesson } from 'src/lessons/entities/lesson.entity';
import { User } from 'src/users/entities/user.entity';
import {
  Column,
  DeepPartial,
  Entity,
  JoinColumn,
  JoinTable,
  ManyToMany,
  ManyToOne,
  OneToMany,
  PrimaryGeneratedColumn,
} from 'typeorm';

import { v4 as uuid } from 'uuid';

@Entity()
export class Course {
  @ApiProperty({
    name: 'id',
    description: 'autogenerated uuid',
  })
  @PrimaryGeneratedColumn('uuid')
  id: string = uuid();

  @ApiProperty({
    name: 'title',
    type: 'string',
    description: "Course's title",
  })
  @Column({ nullable: false })
  title: string;

  @ApiProperty({
    name: 'video',
    description: "Course's video introduction",
    type: 'string',
  })

  @Column({nullable:true})
  video_url: string;

  @Column()
  createdAt: Date;


  @ApiProperty({
    name: 'lessons',
    description: "Course's lessons",
  })
  @OneToMany(() => Lesson, (lesson) => lesson.course, { nullable: true })
  lessons: Lesson[];

  @ApiProperty({
    name: 'language',
    description: 'course about language',
  })
  @ManyToOne(() => Language, (language) => language.courses)
  @JoinColumn()
  language: Language;

  @ManyToMany(() => User, (user) => user.courses, { nullable: true })

  @JoinTable()
  users: User;

  @ManyToOne(() => Category, (category) => category.courses)
  @JoinColumn()
  category: Category;

  constructor(partial: DeepPartial<Course>) {
    Object.assign(this, partial);
  }
}
